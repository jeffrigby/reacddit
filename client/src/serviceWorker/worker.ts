// Reacddit Service Worker with Workbox
// Optimized for Reddit's media-heavy content

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import {
  StaleWhileRevalidate,
  NetworkFirst,
  CacheFirst,
} from 'workbox-strategies';

// Extend the ServiceWorkerGlobalScope to include __WB_MANIFEST
declare const self: ServiceWorkerGlobalScope & {
  __WB_MANIFEST: Array<{ url: string; revision: string | null }>;
};

// Claim clients when service worker activates
// Note: We don't call skipWaiting() here - we wait for user confirmation
// via the update notification before activating the new service worker
clientsClaim();

// Precache all the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA

precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /\/[^/?]+\.[^/]+$/;
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }): boolean => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_') || url.pathname.startsWith('/api')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`)
);

// Runtime caching for Reddit media and API responses
// These strategies are optimized for Reddit's content-heavy nature

// Cache Reddit images with StaleWhileRevalidate
// Shows cached version immediately while fetching fresh copy in background
registerRoute(
  ({ url }): boolean =>
    (url.origin.includes('redd.it') ||
      url.origin.includes('reddit.com') ||
      url.origin.includes('redditstatic.com')) &&
    (url.pathname.endsWith('.png') ||
      url.pathname.endsWith('.jpg') ||
      url.pathname.endsWith('.jpeg') ||
      url.pathname.endsWith('.gif') ||
      url.pathname.endsWith('.webp')),
  new StaleWhileRevalidate({
    cacheName: 'reddit-images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 200, // Increased for Reddit's heavy image usage
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        purgeOnQuotaError: true, // Auto-cleanup if storage quota exceeded
      }),
    ],
  })
);

// Cache Reddit API responses with NetworkFirst
// Tries network first, falls back to cache if offline/slow
registerRoute(
  ({ url }): boolean =>
    url.origin.includes('reddit.com') &&
    (url.pathname.includes('/api/') || url.pathname.endsWith('.json')),
  new NetworkFirst({
    cacheName: 'reddit-api',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes cache for API responses
        purgeOnQuotaError: true,
      }),
    ],
    networkTimeoutSeconds: 3, // Fall back to cache if network takes > 3s
  })
);

// Cache Reddit videos and large media with CacheFirst
// Only fetch from network if not in cache (bandwidth savings)
registerRoute(
  ({ url }): boolean =>
    (url.origin.includes('redd.it') || url.origin.includes('reddit.com')) &&
    (url.pathname.endsWith('.mp4') ||
      url.pathname.endsWith('.webm') ||
      url.pathname.includes('/DASH_')),
  new CacheFirst({
    cacheName: 'reddit-videos',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30, // Limit video cache (videos are large)
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Cache local static assets with StaleWhileRevalidate
registerRoute(
  ({ url }): boolean =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith('.png') ||
      url.pathname.endsWith('.jpg') ||
      url.pathname.endsWith('.svg') ||
      url.pathname.endsWith('.ico')),
  new StaleWhileRevalidate({
    cacheName: 'local-images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 90 * 24 * 60 * 60, // 90 days for local assets
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event: ExtendableMessageEvent) => {
  if (event.data?.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
