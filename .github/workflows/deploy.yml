name: Deploy to AWS

on:
  push:
    branches:
      - master
  workflow_dispatch:  # Allow manual triggers

# Prevent concurrent deployments
concurrency:
  group: production-deployment
  cancel-in-progress: false  # Don't cancel in-progress deployments

# Minimal permissions (OIDC + checkout only)
permissions:
  id-token: write   # Required for AWS OIDC
  contents: read    # Required for actions/checkout

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  NODE_VERSION: '22'
  STACK_NAME: ${{ vars.STACK_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ vars.SITE_URL }}

    steps:
      # ============================================
      # 1. CHECKOUT & SETUP
      # ============================================
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903  # v6.0.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            api/package-lock.json
            client/package-lock.json

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@c71dd89d980e49367c70391e8ada4353f52f2800  # v2
        with:
          use-installer: true

      # ============================================
      # 2. PRE-DEPLOYMENT VALIDATION
      # ============================================
      - name: Install API dependencies
        working-directory: ./api
        run: npm ci

      - name: Validate SAM template
        working-directory: ./api
        run: sam validate --lint

      - name: Type-check API
        working-directory: ./api
        run: npm run type-check

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Lint client
        working-directory: ./client
        run: npm run lint

      # ============================================
      # 3. AWS AUTHENTICATION (OIDC)
      # ============================================
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@00943011d9042930efac3dcd3a170e4273319bc8  # v5.1.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.IAM_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 3600
          mask-aws-account-id: true

      - name: Verify AWS Identity
        run: |
          echo "::notice::Authenticated to AWS successfully"
          aws sts get-caller-identity

      # ============================================
      # 4. BUILD & DEPLOY SAM (API + INFRASTRUCTURE)
      # ============================================
      - name: SAM Build
        working-directory: ./api
        run: |
          sam build \
            --cached \
            --parallel

      - name: SAM Deploy
        working-directory: ./api
        run: |
          sam deploy \
            --stack-name ${{ env.STACK_NAME }} \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --resolve-s3 \
            --capabilities CAPABILITY_IAM \
            --tags "Project=Reacddit Environment=Production ManagedBy=GitHubActions" \
            --parameter-overrides \
              AllowedOrigin=${{ vars.ALLOWED_ORIGIN }} \
              ENVSsmParam=${{ vars.API_ENV_SSM_PARAM }}

      - name: Get stack outputs
        id: stack-outputs
        run: |
          echo "Retrieving stack outputs..."

          S3_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`ReacdditAPIBucket`].OutputValue' \
            --output text)

          CLOUDFRONT_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistribution`].OutputValue' \
            --output text)

          CLOUDFRONT_DOMAIN=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.STACK_NAME }} \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDomain`].OutputValue' \
            --output text)

          # Validate outputs exist
          if [ -z "$S3_BUCKET" ] || [ -z "$CLOUDFRONT_ID" ]; then
            echo "::error::Failed to retrieve stack outputs"
            exit 1
          fi

          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV
          echo "CLOUDFRONT_DOMAIN=$CLOUDFRONT_DOMAIN" >> $GITHUB_ENV

          echo "::notice::S3 Bucket: $S3_BUCKET"
          echo "::notice::CloudFront Distribution: $CLOUDFRONT_ID"
          echo "::notice::CloudFront Domain: $CLOUDFRONT_DOMAIN"

      # ============================================
      # 5. BUILD & DEPLOY CLIENT (REACT APP)
      # ============================================
      - name: Create client environment file
        working-directory: ./client
        run: |
          echo "Creating production environment file..."
          cat > .env << EOF
          VITE_API_PATH=${{ vars.VITE_API_PATH }}
          VITE_PUBLIC_URL=${{ vars.VITE_PUBLIC_URL }}
          EOF
          echo "::notice::Environment file created"

      - name: Build React app
        working-directory: ./client
        run: npm run build

      - name: Upload client to S3 (with cache headers)
        working-directory: ./client
        run: |
          # Upload index.html with short cache (60 seconds)
          aws s3 cp dist/index.html s3://${{ env.S3_BUCKET }}/dist/index.html \
            --cache-control "max-age=60, must-revalidate" \
            --content-type "text/html"

          # Upload hashed assets (JS, CSS, build metadata) with long cache (1 year, immutable)
          # Note: build.json is intentionally cached to verify cache invalidation works
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/dist/ \
            --exclude "index.html" \
            --exclude "*.map" \
            --cache-control "max-age=31536000, immutable" \
            --delete

          # Upload source maps separately (no cache for debugging)
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/dist/ \
            --exclude "*" \
            --include "*.map" \
            --cache-control "no-cache" \
            --delete

          echo "::notice::Client assets uploaded to S3"

      # ============================================
      # 6. INVALIDATE CACHES (ORDERED)
      # ============================================
      - name: Create CloudFront invalidation
        id: cloudfront-invalidation
        run: |
          echo "Creating CloudFront invalidation..."

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          if [ -z "$INVALIDATION_ID" ]; then
            echo "::error::Failed to create CloudFront invalidation"
            exit 1
          fi

          echo "INVALIDATION_ID=$INVALIDATION_ID" >> $GITHUB_ENV
          echo "::notice::CloudFront invalidation created: $INVALIDATION_ID"

      - name: Wait for CloudFront invalidation
        run: |
          echo "Waiting for CloudFront invalidation to complete..."

          if ! aws cloudfront wait invalidation-completed \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id ${{ env.INVALIDATION_ID }}; then
            echo "::error::CloudFront invalidation failed or timed out"
            exit 1
          fi

          echo "::notice::CloudFront invalidation completed"

      - name: Purge Cloudflare cache
        if: ${{ secrets.CLOUDFLARE_TOKEN != '' && secrets.CLOUDFLARE_ZONE_ID != '' }}
        run: |
          echo "Purging Cloudflare cache..."

          RESPONSE=$(curl -s -X POST \
            "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}')

          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" = "true" ]; then
            echo "::notice::Cloudflare cache purged successfully"
          else
            echo "::warning::Cloudflare cache purge failed (continuing deployment)"
            echo "$RESPONSE" | jq '.'
          fi

      # ============================================
      # 7. POST-DEPLOYMENT VERIFICATION
      # ============================================
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."

          # Wait a moment for caches to propagate
          sleep 5

          # Check CloudFront serves content
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.CLOUDFRONT_DOMAIN }}/")
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::CloudFront health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi

          echo "::notice::Deployment verified successfully"
          echo "::notice::Site accessible at: ${{ vars.SITE_URL }}"

      - name: Post deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Site** | ${{ vars.SITE_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **CloudFront** | https://${{ env.CLOUDFRONT_DOMAIN }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Stack** | ${{ env.STACK_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Region** | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Run ID** | ${{ github.run_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Cache Invalidation" >> $GITHUB_STEP_SUMMARY
          echo "- CloudFront: ${{ env.INVALIDATION_ID }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ secrets.CLOUDFLARE_TOKEN }}" ]; then
            echo "- Cloudflare: ✓ Purged" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Cloudflare: Skipped (not configured)" >> $GITHUB_STEP_SUMMARY
          fi
