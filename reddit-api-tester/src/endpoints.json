{
  "endpoints": [
    {
      "endpoint": "/api/v1/me",
      "method": "GET",
      "description": "Get current user account information",
      "requiresAuth": true,
      "expectedType": "MeResponse"
    },
    {
      "endpoint": "/api/v1/me/prefs",
      "method": "GET",
      "description": "Get user preferences",
      "requiresAuth": true,
      "expectedType": "UserPreferences"
    },
    {
      "endpoint": "/api/v1/me/karma",
      "method": "GET",
      "description": "Get user karma breakdown",
      "requiresAuth": true,
      "expectedType": "UserKarmaResponse"
    },
    {
      "endpoint": "/hot",
      "method": "GET",
      "description": "Get hot posts from frontpage",
      "params": {
        "limit": 10,
        "raw_json": 1
      },
      "expectedType": "Listing<LinkData>"
    },
    {
      "endpoint": "/new",
      "method": "GET",
      "description": "Get new posts from frontpage",
      "params": {
        "limit": 10,
        "raw_json": 1
      },
      "expectedType": "Listing<LinkData>"
    },
    {
      "endpoint": "/r/programming/hot",
      "method": "GET",
      "description": "Get hot posts from a specific subreddit",
      "params": {
        "limit": 5,
        "raw_json": 1
      },
      "expectedType": "Listing<LinkData>"
    },
    {
      "endpoint": "/r/programming/about",
      "method": "GET",
      "description": "Get subreddit information",
      "params": {
        "raw_json": 1
      },
      "expectedType": "Thing<SubredditData>"
    },
    {
      "endpoint": "/r/programming/about/rules",
      "method": "GET",
      "description": "Get subreddit rules",
      "params": {
        "raw_json": 1
      },
      "expectedType": "SubredditRulesResponse"
    },
    {
      "endpoint": "/r/programming/about/traffic",
      "method": "GET",
      "description": "Get subreddit traffic stats",
      "params": {
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "SubredditTrafficResponse"
    },
    {
      "endpoint": "/r/programming/about/edit",
      "method": "GET",
      "description": "Get subreddit settings (mod only)",
      "params": {
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "Thing<SubredditSettingsData>"
    },
    {
      "endpoint": "/api/search_reddit_names",
      "method": "GET",
      "description": "Search for subreddits by name",
      "params": {
        "query": "javascript",
        "exact": false,
        "include_over_18": false
      },
      "expectedType": "SearchRedditNamesResponse"
    },
    {
      "endpoint": "/api/info",
      "method": "GET",
      "description": "Get information about a thing by ID",
      "params": {
        "id": "t5_2fwo",
        "raw_json": 1
      },
      "expectedType": "InfoResponse"
    },
    {
      "endpoint": "/user/spez/about",
      "method": "GET",
      "description": "Get user profile information",
      "params": {
        "raw_json": 1
      },
      "expectedType": "Thing<AccountData>"
    },
    {
      "endpoint": "/subreddits/popular",
      "method": "GET",
      "description": "Get popular subreddits",
      "params": {
        "limit": 10,
        "raw_json": 1
      },
      "expectedType": "Listing<SubredditData>"
    },
    {
      "endpoint": "/api/v1/collections/subreddit_collections",
      "method": "GET",
      "description": "Get subreddit collections",
      "params": {
        "sr_fullname": "t5_2fwo"
      },
      "requiresAuth": false,
      "expectedType": "SubredditCollectionsResponse"
    },
    {
      "endpoint": "/api/v1/me/trophies",
      "method": "GET",
      "description": "Get user trophies",
      "requiresAuth": true,
      "expectedType": "UserTrophiesResponse"
    },
    {
      "endpoint": "/message/inbox",
      "method": "GET",
      "description": "Get user inbox messages",
      "params": {
        "limit": 5,
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "Listing<MessageData>"
    },
    {
      "endpoint": "/api/info",
      "method": "GET",
      "description": "Get info about a specific post (uses dynamic POST_ID)",
      "params": {
        "id": "{{POST_ID}}",
        "raw_json": 1
      },
      "requiresAuth": false,
      "expectedType": "InfoResponse"
    },
    {
      "endpoint": "/api/vote",
      "method": "POST",
      "description": "Upvote a post (dynamic POST_ID)",
      "body": {
        "id": "{{POST_ID}}",
        "dir": 1
      },
      "requiresAuth": true,
      "expectedType": "VoteResponse"
    },
    {
      "endpoint": "/api/vote",
      "method": "POST",
      "description": "Remove vote from a post (dynamic POST_ID)",
      "body": {
        "id": "{{POST_ID}}",
        "dir": 0
      },
      "requiresAuth": true,
      "expectedType": "VoteResponse"
    },
    {
      "endpoint": "/api/vote",
      "method": "POST",
      "description": "Downvote a post (dynamic POST_ID)",
      "body": {
        "id": "{{POST_ID}}",
        "dir": -1
      },
      "requiresAuth": true,
      "expectedType": "VoteResponse"
    },
    {
      "endpoint": "/api/save",
      "method": "POST",
      "description": "Save a post (dynamic POST_ID)",
      "body": {
        "id": "{{POST_ID}}"
      },
      "requiresAuth": true,
      "expectedType": "SaveResponse"
    },
    {
      "endpoint": "/api/unsave",
      "method": "POST",
      "description": "Unsave a post (dynamic POST_ID)",
      "body": {
        "id": "{{POST_ID}}"
      },
      "requiresAuth": true,
      "expectedType": "UnsaveResponse"
    },
    {
      "endpoint": "/api/multi/mine",
      "method": "GET",
      "description": "Get user's multireddits",
      "params": {
        "expand_srs": false,
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "Thing<LabeledMultiData>[]"
    },
    {
      "endpoint": "/api/search_subreddits",
      "method": "POST",
      "description": "Search for subreddits",
      "body": {
        "query": "javascript",
        "exact": false,
        "include_over_18": false,
        "raw_json": 1
      },
      "requiresAuth": false,
      "expectedType": "SearchSubredditsResponse"
    },
    {
      "endpoint": "/user/{{USERNAME}}/submitted",
      "method": "GET",
      "description": "Get user's submitted posts (dynamic USERNAME)",
      "params": {
        "limit": 5,
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "Listing<LinkData>"
    },
    {
      "endpoint": "/r/{{POST_WITH_COMMENTS_SUBREDDIT}}/comments/{{POST_WITH_COMMENTS_ID}}",
      "method": "GET",
      "description": "Get full comment tree from post with many comments (dynamic)",
      "params": {
        "limit": 100,
        "raw_json": 1
      },
      "requiresAuth": false,
      "expectedType": "CommentsResponse"
    },
    {
      "endpoint": "/api/morechildren",
      "method": "GET",
      "description": "Load more comment children (dynamic)",
      "params": {
        "api_type": "json",
        "link_id": "t3_{{POST_WITH_COMMENTS_ID}}",
        "children": "{{MORE_CHILDREN_IDS}}",
        "raw_json": 1
      },
      "requiresAuth": false,
      "expectedType": "MoreChildrenResponse"
    },
    {
      "endpoint": "/user/{{USERNAME}}/comments",
      "method": "GET",
      "description": "Get user's comment history (dynamic USERNAME)",
      "params": {
        "limit": 10,
        "raw_json": 1
      },
      "requiresAuth": true,
      "expectedType": "Listing<CommentData>"
    }
  ]
}